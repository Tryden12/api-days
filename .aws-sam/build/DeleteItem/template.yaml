# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  API-DAYS

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # API Gateway Setup
  AprenderoApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: V1
      Description: API supporting the application
      Cors:
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowMethods: "'DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT'"
        AllowOrigin: "'*'"

  # Lambda function config associated with the source code: get-all-items.js
  GetAllItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAllItems
      Handler: src/handlers/get-all-items.getAllItemsHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get all items from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DayTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DayTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DAY_TABLE: !Ref DayTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AprenderoApi
            Path: /GetAllItems
            Method: GET

  # Lambda function config associated with the source code: get-by-id.js
  GetById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getById
      Handler: src/handlers/get-by-id.getByIdHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP get method to get one item by id from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DayTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DayTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DAY_TABLE: !Ref DayTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AprenderoApi
            Path: /GetById/{id}
            Method: GET

  # Lambda function config associated with the source code: put-item.js
  PutItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putItem
      Handler: src/handlers/put-item.putItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: A simple example includes a HTTP post method to add one item to a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DayTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DayTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DAY_TABLE: !Ref DayTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AprenderoApi
            Path: /PutItem
            Method: POST

  # Lambda function config associated with the source code: delete-item.js
  DeleteItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteItem
      Handler: src/handlers/delete-item.deleteItemHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 100
      Description: HTTP delete method to delete one item from a DynamoDB table.
      Policies:
        # Give Create/Read/Update/Delete Permissions to the DayTable
        - DynamoDBCrudPolicy:
            TableName: !Ref DayTable
      Environment:
        Variables:
          # Make table name accessible as environment variable from function code during execution
          DAY_TABLE: !Ref DayTable
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref AprenderoApi
            Path: /DeleteItem/{id}
            Method: DELETE


  # Simple syntax to create a DynamoDB table with a single attribute primary key, more in
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlesssimpletable

  # Database
  DayTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: DAY_TABLE
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for your App configuration"
    Value: !Sub "https://${AprenderoApi}.execute-api.${AWS::Region}.amazonaws.com/V1/"
